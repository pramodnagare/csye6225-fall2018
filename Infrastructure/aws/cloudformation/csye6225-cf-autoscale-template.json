{  
   "AWSTemplateFormatVersion":"2010-09-09",
   "Parameters":{  
      "hostedzone":{  
         "Description":"Domain name",
         "Type":"String"
      },
      "DBUSERNAME":{  
         "Description":"RDS DB username",
         "Type":"String"
      },
      "DBSCHEMA":{  
         "Description":"RDS DB Name",
         "Type":"String"
      },
      "DBPASSWORD":{  
         "Description":"RDS DB password",
         "Type":"String"
      },
      "dynamoDBName":{  
         "Description":"Dynamo DB name",
         "Type":"String"
      },
      "certARN":{  
         "Description":" SSL certificate ARN",
         "Type":"String"
      },
      "hzid":{  
         "Description":" Hosted zone ID",
         "Type":"String"
      }
   },
   "Resources":{  
      "SecurityGroupWB":{  
         "Type":"AWS::EC2::SecurityGroup",
         "Properties":{  
            "GroupName":"csye6225-sg-webapp",
            "GroupDescription":"SecurityGroup to access webapplication",
            "SecurityGroupIngress":[  
               {  
                  "CidrIp":"0.0.0.0/0",
                  "Description":"To allow world for port 80",
                  "FromPort":"80",
                  "ToPort":"80",
                  "IpProtocol":"TCP"
               },
               {  
                  "CidrIp":"0.0.0.0/0",
                  "Description":"To allow world for port 443",
                  "FromPort":"443",
                  "ToPort":"443",
                  "IpProtocol":"TCP"
               },
               {  
                  "CidrIp":"0.0.0.0/0",
                  "Description":"To allow world for port 22",
                  "FromPort":"22",
                  "ToPort":"22",
                  "IpProtocol":"TCP"
               },
               {  
                  "CidrIp":"0.0.0.0/0",
                  "Description":"To allow world for port 8080",
                  "FromPort":"8080",
                  "ToPort":"8080",
                  "IpProtocol":"TCP"
               }
            ],
            "Tags":[  
               {  
                  "Key":"Name",
                  "Value":"SecurityGroupWB"
               }
            ],
            "VpcId":{  
               "Fn::ImportValue":"CFVPCID"
            }
         }
      },
      "myDynamoDBTable":{  
         "Type":"AWS::DynamoDB::Table",
         "Properties":{  
            "TableName":{  
               "Ref":"dynamoDBName"
            },
            "AttributeDefinitions":[  
               {  
                  "AttributeName":"id",
                  "AttributeType":"S"
               }
            ],
            "KeySchema":[  
               {  
                  "AttributeName":"id",
                  "KeyType":"HASH"
               }
            ],
            "ProvisionedThroughput":{  
               "ReadCapacityUnits":"5",
               "WriteCapacityUnits":"5"
            },
            "TimeToLiveSpecification":{  
               "AttributeName":"ttl",
               "Enabled":"true"
            },
            "Tags":[  
               {  
                  "Key":"Name",
                  "Value":"csye6225_DynamoDB"
               }
            ]
         }
      },
      "SecurityGroupDB":{  
         "Type":"AWS::EC2::SecurityGroup",
         "Properties":{  
            "GroupName":"csye6225-sg-rds",
            "GroupDescription":"SecurityGroup to access webapplication",
            "SecurityGroupIngress":[  
               {  
                  "SourceSecurityGroupId":{  
                     "Ref":"SecurityGroupWB"
                  },
                  "Description":"To security group to access port 3306",
                  "FromPort":"3306",
                  "ToPort":"3306",
                  "IpProtocol":"TCP"
               }
            ],
            "Tags":[  
               {  
                  "Key":"Name",
                  "Value":"SecurityGroupDB"
               }
            ],
            "VpcId":{  
               "Fn::ImportValue":"CFVPCID"
            }
         }
      },
      "NewVolume":{  
         "Type":"AWS::EC2::Volume",
         "Properties":{  
            "Size":"20",
            "VolumeType":"gp2",
            "AvailabilityZone":"us-east-1a",
            "Tags":[  
               {  
                  "Key":"Name",
                  "Value":"EC2AppVolume"
               }
            ]
         }
      },
      "S3bucket":{  
         "Type":"AWS::S3::Bucket",
         "Properties":{  
            "BucketName":{  
               "Fn::Join":[  
                  "",
                  [  
                     {  
                        "Ref":"hostedzone"
                     },
                     ".csye6225.com"
                  ]
               ]
            }
         }
      },
      "RDSInstance":{  
         "Type":"AWS::RDS::DBInstance",
         "Properties":{  
            "DBName":{  
               "Ref":"DBSCHEMA"
            },
            "AllocatedStorage":"5",
            "DBInstanceClass":"db.t2.medium",
            "Engine":"mysql",
            "EngineVersion":"5.6.37",
            "MasterUsername":{  
               "Ref":"DBUSERNAME"
            },
            "MasterUserPassword":{  
               "Ref":"DBPASSWORD"
            },
            "MultiAZ":"false",
            "VPCSecurityGroups":[  
               {  
                  "Ref":"SecurityGroupDB"
               }
            ],
            "PubliclyAccessible":"false",
            "DBInstanceIdentifier":"DBInstanceID",
            "DBSubnetGroupName":{  
               "Fn::ImportValue":"CFDBPrivateSubnets"
            },
            "Tags":[  
               {  
                  "Key":"Name",
                  "Value":"MySQLDatabase"
               }
            ]
         }
      },
      "AutoScaledEc2Instance":{  
         "Type":"AWS::AutoScaling::LaunchConfiguration",
         "Properties":{  
            "IamInstanceProfile":"ec2instanceprofile",
            "ImageId":"ami-9887c6e7",
            "InstanceType":"t2.micro",
            "KeyName":"appec2",
            "SecurityGroups":[  
               {  
                  "Ref":"SecurityGroupWB"
               }
            ],
            "UserData":{  
               "Fn::Base64":{  
                  "Fn::Join":[  
                     "\n",
                     [  
                        "#!/bin/bash -xe ",
                        "yum install ruby ntp wget java-1.8.0-openjdk-devel -y",
                        "systemctl start ntpd",
                        "systemctl enable ntpd",
                        "sudo -s",
                        "yum install ruby -y",
                        "yum install wget -y",
                        "yum install python -y",
                        "groupadd tomcat",
                        "useradd -M -s /bin/nologin -g tomcat -d /opt/tomcat tomcat",
                        "cd /tmp",
                        "wget http://apache.mirrors.pair.com/tomcat/tomcat-8/v8.5.34/bin/apache-tomcat-8.5.34.tar.gz",
                        "mkdir /opt/tomcat",
                        "sudo tar xvf apache-tomcat-8*tar.gz -C /opt/tomcat --strip-components=1",
                        "cd /opt/tomcat",
                        "chgrp -R tomcat /opt/tomcat",
                        "chmod -R g+r conf",
                        "chmod g+x conf",
                        "chown -R tomcat webapps/ work/ temp/ logs/",
                        "cd /opt && sudo chown -R tomcat tomcat/",
                        "#cd /usr/lib/systemd/system",
                        "cd /opt/tomcat",
                        "mkdir uploads",
                        "chmod o+rwx uploads/",
                        "cd /etc/systemd/system",
                        "touch tomcat.service",
                        "echo '[Unit]' > tomcat.service",
                        "echo 'Description=Apache Tomcat Web Application Container' >> tomcat.service",
                        "echo 'After=syslog.target network.target' >> tomcat.service",
                        "echo '[Service]' >> tomcat.service",
                        "echo 'Type=forking' >> tomcat.service",
                        "echo 'Environment=JAVA_HOME=/usr/lib/jvm/jre' >> tomcat.service",
                        "echo 'Environment=CATALINA_PID=/opt/tomcat/temp/tomcat.pid' >> tomcat.service",
                        "echo 'Environment=CATALINA_HOME=/opt/tomcat' >> tomcat.service",
                        "echo 'Environment=CATALINA_BASE=/opt/tomcat' >> tomcat.service",
                        "echo 'Environment=\"CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC\"' >> tomcat.service",
                        "echo 'Environment=\"JAVA_OPTS=-Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom\"' >> tomcat.service",
                        "echo 'ExecStart=/opt/tomcat/bin/startup.sh' >> tomcat.service",
                        "echo 'ExecStop=/bin/kill -15 $MAINPID' >> tomcat.service",
                        "echo 'User=tomcat' >> tomcat.service",
                        "echo 'Group=tomcat' >> tomcat.service",
                        "echo 'UMask=0007' >> tomcat.service",
                        "echo 'RestartSec=10' >> tomcat.service",
                        "echo 'Restart=always' >> tomcat.service",
                        "echo '[Install]' >> tomcat.service",
                        "echo 'WantedBy=multi-user.target' >> tomcat.service",
                        "systemctl daemon-reload",
                        "cd /opt/tomcat/bin",
                        "touch setenv.sh",
                        "echo 'JAVA_OPTS=\"-Djava.net.preferIPv4Stack=true -Djava.net.preferIPv4Addresses=true\"' >> setenv.sh",
                        "echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.profiles.active=Dev\"' >> setenv.sh",
                        {  
                           "Fn::Join":[  
                              "",
                              [  
                                 "echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.datasource.url=jdbc:mysql://",
                                 {  
                                    "Fn::GetAtt":[  
                                       "RDSInstance",
                                       "Endpoint.Address"
                                    ]
                                 },
                                 ":3306/csye6225\"' >> setenv.sh \n"
                              ]
                           ]
                        },
                        {  
                           "Fn::Join":[  
                              "",
                              [  
                                 "echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.datasource.username=",
                                 {  
                                    "Ref":"DBUSERNAME"
                                 },
                                 "\"' >> setenv.sh \n"
                              ]
                           ]
                        },
                        {  
                           "Fn::Join":[  
                              "",
                              [  
                                 "echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.datasource.password=",
                                 {  
                                    "Ref":"DBPASSWORD"
                                 },
                                 "\"' >> setenv.sh \n"
                              ]
                           ]
                        },
                        {  
                           "Fn::Join":[  
                              "",
                              [  
                                 "echo 'JAVA_OPTS=\"$JAVA_OPTS -DdynamoDB=",
                                 {  
                                    "Ref":"dynamoDBName"
                                 },
                                 "\"' >> setenv.sh \n"
                              ]
                           ]
                        },
                        {  
                           "Fn::Join":[  
                              "",
                              [  
                                 "echo 'JAVA_OPTS=\"$JAVA_OPTS -DemailHost=",
                                 {  
                                    "Ref":"hostedzone"
                                 },
                                 "\"' >> setenv.sh \n"
                              ]
                           ]
                        },
                        {  
                           "Fn::Join":[  
                              "",
                              [  
                                 "echo 'JAVA_OPTS=\"$JAVA_OPTS -DtopicARN=",
                                 {  
                                    "Fn::ImportValue":"snsTopicARN"
                                 },
                                 "\"' >> setenv.sh \n"
                              ]
                           ]
                        },
                        "systemctl enable tomcat.service",
                        "systemctl start tomcat.service",
                        "wget https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install \n",
                        "chmod +x ./install \n",
                        "./install auto \n",
                        "service codedeploy-agent start \n",
                        "cd /opt/",
                        "touch cloudwatch-config.json",
                        "echo '{\"agent\":{' >> cloudwatch-config.json",
                        "echo '\"metrics_collection_interval\":10,' >> cloudwatch-config.json",
                        "echo '\"logfile\": \"/var/logs/amazon-cloudwatch-agent.log\"' >> cloudwatch-config.json",
                        "echo '},' >> cloudwatch-config.json",
                        "echo '\"logs\":{\"logs_collected\": {\"files\": {\"collect_list\": [{\"file_path\": \"/opt/tomcat/logs/csye6225.log\",\"log_group_name\": \"csye6225_fall2018\",\"log_stream_name\": \"Webapplication\"}]}},\"log_stream_name\": \"cloudwatch_log_stream\"},' >> cloudwatch-config.json",
                        "echo '\"metrics\":{' >> cloudwatch-config.json",
                        "echo '\"metrics_collected\":{' >> cloudwatch-config.json",
                        "echo '\"statsd\":{' >> cloudwatch-config.json",
                        "echo '\"service_address\":\":8125\", \"metrics_collection_interval\":10, \"metrics_aggregation_interval\":0 }}}}' >> cloudwatch-config.json",
                        "wget https://s3.amazonaws.com/amazoncloudwatch-agent/centos/amd64/latest/amazon-cloudwatch-agent.rpm",
                        "rpm -U ./amazon-cloudwatch-agent.rpm",
                        "/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/cloudwatch-config.json -s",
                        "cd /",
                        "wget https://s3.amazonaws.com/configfileforcloudwatch/amazon-cloudwatch-agent.service",
                        "cp amazon-cloudwatch-agent.service /usr/lib/systemd/system/",
                        "systemctl enable amazon-cloudwatch-agent.service",
                        "systemctl start amazon-cloudwatch-agent.service",
                        "systemctl daemon-reload",
                        "systemctl enable amazon-cloudwatch-agent.service",
                        "systemctl start amazon-cloudwatch-agent.service",
                        "systemctl enable tomcat.service",
                        "systemctl start tomcat.service",
                        "wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm",
                        "rpm -ivh mysql-community-release-el7-5.noarch.rpm",
                        "yum install mysql-server -y",
                        "yum install unzip -y \n"
                     ]
                  ]
               }
            }
         },
         "DependsOn":"RDSInstance"
      },
      "WebServerGroup":{  
         "Type":"AWS::AutoScaling::AutoScalingGroup",
         "Properties":{  
            "AutoScalingGroupName":"csye6225ASG",
            "Cooldown":"60",
            "DesiredCapacity":"3",
            "LaunchConfigurationName":{  
               "Ref":"AutoScaledEc2Instance"
            },
            "TargetGroupARNs":[  
               {  
                  "Ref":"LoadBalancerTarget"
               }
            ],
            "MaxSize":"10",
            "MinSize":"3",
            "Tags":[  
               {  
                  "Key":"Name",
                  "Value":"EC2Webapplication",
                  "PropagateAtLaunch":"True"
               }
            ],
            "VPCZoneIdentifier":[  
               {  
                  "Fn::ImportValue":"PublicSubnet1"
               },
               {  
                  "Fn::ImportValue":"PublicSubnet2"
               },
               {  
                  "Fn::ImportValue":"PublicSubnet3"
               }
            ]
         }
      },
      "LoadBalancer":{  
         "Type":"AWS::ElasticLoadBalancingV2::LoadBalancer",
         "Properties":{  
            "Name":"csye6225LB",
            "Scheme":"internet-facing",
            "Subnets":[  
               {  
                  "Fn::ImportValue":"PublicSubnet1"
               },
               {  
                  "Fn::ImportValue":"PublicSubnet2"
               },
               {  
                  "Fn::ImportValue":"PublicSubnet3"
               }
            ],
            "SecurityGroups":[  
               {  
                  "Ref":"SecurityGroupWB"
               }
            ],
            "Type":"application",
            "IpAddressType":"ipv4"
         }
      },
      "LoadBalancerTarget":{  
         "Type":"AWS::ElasticLoadBalancingV2::TargetGroup",
         "Properties":{  
            "HealthCheckIntervalSeconds":30,
            "UnhealthyThresholdCount":10,
            "HealthCheckPath":"/",
            "TargetGroupAttributes":[  
               {  
                  "Key":"deregistration_delay.timeout_seconds",
                  "Value":"20"
               }
            ],
            "Name":"csye6225TG",
            "HealthCheckPort":8080,
            "TargetType":"instance",
            "Port":8080,
            "Protocol":"HTTP",
            "VpcId":{  
               "Fn::ImportValue":"CFVPCID"
            }
         }
      },
      "LoadBalancerListener":{  
         "Type":"AWS::ElasticLoadBalancingV2::Listener",
         "Properties":{  
            "DefaultActions":[  
               {  
                  "Type":"forward",
                  "TargetGroupArn":{  
                     "Ref":"LoadBalancerTarget"
                  }
               }
            ],
            "LoadBalancerArn":{  
               "Ref":"LoadBalancer"
            },
            "Port":"443",
            "Protocol":"HTTPS",
            "Certificates":[  
               {  
                  "CertificateArn":{  
                     "Ref":"certARN"
                  }
               }
            ]
         }
      },
      "WebServerScaleUpPolicy":{  
         "Type":"AWS::AutoScaling::ScalingPolicy",
         "Properties":{  
            "AdjustmentType":"ChangeInCapacity",
            "AutoScalingGroupName":{  
               "Ref":"WebServerGroup"
            },
            "Cooldown":"60",
            "ScalingAdjustment":"1"
         }
      },
      "WebServerScaleDownPolicy":{  
         "Type":"AWS::AutoScaling::ScalingPolicy",
         "Properties":{  
            "AdjustmentType":"ChangeInCapacity",
            "AutoScalingGroupName":{  
               "Ref":"WebServerGroup"
            },
            "Cooldown":"60",
            "ScalingAdjustment":"-1"
         }
      },
      "CPUAlarmHigh":{  
         "Type":"AWS::CloudWatch::Alarm",
         "Properties":{  
            "AlarmDescription":"Scale-up if CPU > 10% for 1 min",
            "MetricName":"CPUUtilization",
            "Namespace":"AWS/EC2",
            "Statistic":"Average",
            "Period":"60",
            "EvaluationPeriods":"2",
            "Threshold":"10",
            "AlarmActions":[  
               {  
                  "Ref":"WebServerScaleUpPolicy"
               }
            ],
            "Dimensions":[  
               {  
                  "Name":"AutoScalingGroupName",
                  "Value":{  
                     "Ref":"WebServerGroup"
                  }
               }
            ],
            "ComparisonOperator":"GreaterThanThreshold"
         }
      },
      "CPUAlarmLow":{  
         "Type":"AWS::CloudWatch::Alarm",
         "Properties":{  
            "AlarmDescription":"Scale-down if CPU < 8% for 1 minutes",
            "MetricName":"CPUUtilization",
            "Namespace":"AWS/EC2",
            "Statistic":"Average",
            "Period":"60",
            "EvaluationPeriods":"2",
            "Threshold":"8",
            "AlarmActions":[  
               {  
                  "Ref":"WebServerScaleDownPolicy"
               }
            ],
            "Dimensions":[  
               {  
                  "Name":"AutoScalingGroupName",
                  "Value":{  
                     "Ref":"WebServerGroup"
                  }
               }
            ],
            "ComparisonOperator":"LessThanThreshold"
         }
      },
      "ResourceRecords":{  
         "Type":"AWS::Route53::RecordSet",
         "Properties":{  
            "HostedZoneId":{  
               "Ref":"hzid"
            },
            "Name":{  
               "Fn::Join":[  
                  "",
                  [  
                     {  
                        "Ref":"hostedzone"
                     },
                     "."
                  ]
               ]
            },
            "AliasTarget":{  
               "HostedZoneId":{  
                  "Fn::GetAtt":[  
                     "LoadBalancer",
                     "CanonicalHostedZoneID"
                  ]
               },
               "DNSName":{  
                  "Fn::GetAtt":[  
                     "LoadBalancer",
                     "DNSName"
                  ]
               }
            },
            "Type":"A"
         }
      },
      "CodeDeployApplication":{  
         "Type":"AWS::CodeDeploy::Application",
         "Properties":{  
            "ApplicationName":"CSYE6225CodeDeployApplication"
         }
      },
      "CodeDeployServiceRole":{  
         "Type":"AWS::IAM::Role",
         "Properties":{  
            "RoleName":"CodeDeployServiceRole",
            "AssumeRolePolicyDocument":{  
               "Version":"2012-10-17",
               "Statement":[  
                  {  
                     "Effect":"Allow",
                     "Principal":{  
                        "Service":"codedeploy.amazonaws.com"
                     },
                     "Action":[  
                        "sts:AssumeRole"
                     ]
                  }
               ]
            },
            "ManagedPolicyArns":[  
               "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"
            ],
            "Path":"/"
         }
      },
      "DeploymentGroup":{  
         "Type":"AWS::CodeDeploy::DeploymentGroup",
         "Properties":{  
            "ApplicationName":{  
               "Ref":"CodeDeployApplication"
            },
            "AutoScalingGroups":[  
               {  
                  "Ref":"WebServerGroup"
               }
            ],
            "DeploymentGroupName":"Codedeploy_groupname",
            "DeploymentStyle":{  
               "DeploymentType":"IN_PLACE",
               "DeploymentOption":"WITHOUT_TRAFFIC_CONTROL"
            },
            "Ec2TagFilters":[  
               {  
                  "Key":"Name",
                  "Type":"KEY_AND_VALUE",
                  "Value":"EC2Webapplication"
               }
            ],
            "LoadBalancerInfo":{  
               "TargetGroupInfoList":[  
                  {  
                     "Name":{  
                        "Fn::GetAtt":[  
                           "LoadBalancerTarget",
                           "TargetGroupName"
                        ]
                     }
                  }
               ]
            },
            "ServiceRoleArn":{  
               "Fn::GetAtt":[  
                  "CodeDeployServiceRole",
                  "Arn"
               ]
            }
         }
      }
   }
}
